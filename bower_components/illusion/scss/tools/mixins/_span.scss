// Span mixin

@mixin span($span: null, $fromto: false, $multiplier: 1, $bottom: false, $defaults: true, $omega: null) {

  // Give a warning when $multiplier is not dividable by 0.5
  @if ($multiplier % 0.5 != 0) {
    @warn 'The `amount` in the `span` mixin is designed to work best with a number dividable by 0.5';
  }

  // Get new SCSS map
  $grid-breakpoints: grid-breakpoints($fromto);

  // Loop
  @each $breakpoint, $values in $grid-breakpoints {

    // Breakpoint values
    $breakpointGutter: map-get($values, gutter);
    $breakpointWidth: map-get($values, width);

    // Span values
    $spanColumns: nth($span, 1);
    $spanContainer: getcontainer($span);
    $spanAmount: $spanContainer / $spanColumns;

    // Column values
    $columnGutter: ($spanAmount - 1) * $breakpointGutter * $multiplier;
    $columnWidth: calc((100% - #{$columnGutter}) / #{$spanAmount});
    $columnMargin: calc(#{$breakpointGutter * $multiplier});

    // Only run between starting and stopping breakpoints
    @include ifBreakpoint($breakpointWidth) {

      // Width
      width: $columnWidth;

      // Left margin
      margin-left: $columnMargin;

      // Bottom margin
      @if $bottom != false {
        margin-bottom: $columnMargin;
      }

      // Omega settings
      @if $omega != null {
        // Reset all previous NTH values and set new spacing
        @if $breakpointWidth != 0 {
          &:nth-child(n) {
            margin-left: $columnMargin;
            margin-right: 0;

            @if $illusion-grid-type == float {
              clear: none;
            }
          }
        }

        // sub-pixel rounding fix
        &:nth-child(#{$omega}n) {
          margin-right: -1px;
        }

        // Clear the item after omega
        &:nth-child(#{$omega}n+1) {
          margin-left: 0;

          @if $illusion-grid-type == float {
            clear: left;
          }
        }
      }

      @if $defaults == true {

        // Float item
        @if $illusion-grid-type == float {
          float: left;
        }

        // No margin for first child
        &:first-child {
          margin-left: 0;
        }

        // sub-pixel rounding fix
        @if $omega == null {
          &:last-child {
            margin-right: -1px;
          }
        }

        // Set to true so it only runs once
        $defaults: false;
      }
    }
  }
}
