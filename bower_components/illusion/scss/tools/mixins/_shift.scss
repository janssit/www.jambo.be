// Shift

@mixin shift($shift: null, $fromto: false, $multiplier: 1, $defaults: true) {

  // Give a warning when $multiplier is not dividable by 0.5
  @if ($multiplier % 0.5 != 0) {
    @warn 'The `amount` in the `span` mixin is designed to work best with a number dividable by 0.5';
  }

  // Get new SCSS map
  $grid-breakpoints: grid-breakpoints($fromto);

  // Loop
  @each $breakpoint, $values in $grid-breakpoints {

    // Breakpoint values
    $breakpointGutter: map-get($values, gutter);
    $breakpointWidth: map-get($values, width);

    // Shift values
    $spanColumns: nth($shift, 1);
    $spanContainer: getcontainer($shift);
    $spanAmount: $spanContainer / $spanColumns;

    // Negative
    $negative: false;
    @if $spanColumns < 0 {
      $spanColumns: $spanColumns * -1;
      $negative: true;
    }

    // Calculate after negative test
    @if $spanColumns != 0 {
      $spanAmount: $spanContainer / $spanColumns;
    }

    // Only run between starting and stopping breakpoints
    @include ifBreakpoint($breakpointWidth) {

      // Set variable
      $left: auto;

      @if $spanColumns != 0 {
        // Column values
        $columnGutter: ($spanAmount - 1) * $breakpointGutter * $multiplier;

        // Calculate left
        $left: calc(((100% - #{$columnGutter}) / #{$spanAmount}) + #{$breakpointGutter * $multiplier});
        @if $negative == true {
          $left: calc(((-100% - #{$breakpointGutter * $multiplier}) / #{$spanAmount}));
        }
      }

      // Default properties
      @if $defaults == true {
        // Relative positioning for shifting with `left`
        position: relative;

        $defaults: false;
      }

      // Set left
      left: $left;

    }
  }
}
